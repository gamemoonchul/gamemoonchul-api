jwt:
  secret: ${JWT_SECRET}

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET}
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    stack:
      auto: false
    region:
      static: ${S3_REGION}
      auto: false

lol:
  api:
    key: ${RIOT_API}

spring:
  data:
    redis:
      host: localhost
      port: 6379
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          apple:
            client-id: ${APPLE_CLIENT_ID} # input apple client id
            redirect-uri: '${baseUrl}/login/oauth2/code/apple'
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: Apple
            scope:
              - openid
              - email
              - name
        provider:
          apple:
            authorization-uri: https://appleid.apple.com/auth/authorize?response_mode=form_post
            token-uri: https://appleid.apple.com/auth/token
            jwk-set-uri: https://appleid.apple.com/auth/keys
  jpa:
    show-sql: true
    properties:
      format_sql: true
      dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: create
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  datasource:
    # jdbc:mysql://localhost:3306/[TABLE NAME]?userSSL=false&useUnicode=true&allowPublicKeyRetrieval=true
    url: ${DB_URL}
    driver-class-name: com.mysql.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

apple:
  clientId: ${APPLE_CLIENT_ID}
  keyId: ${APPLE_KEY_ID}
  teamId: ${APPLE_TEAM_ID}
  privateKey: ${APPLE_PRIVATE_KEY}

logging:
  level:
    root: error